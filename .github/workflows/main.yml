name: DevSecOps Build, Test & Deploy to ECS Pipeline

on:
  push:
    branches:
      - DevSecOps
  pull_request:
    branches:
      - DevSecOps

jobs:
  docker-build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Docker
        run: |
          sudo apt-get remove containerd.io
          sudo apt install docker.io docker-compose -y
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Verify Docker installation
        run: |
          docker --version
          docker-compose --version

      - name: Install AWS Elastic Beanstalk CLI
        run: |
          pip install --upgrade --user awsebcli
          export PATH=$PATH:$HOME/.local/bin

      - name: Build Backend Image
        run: |
          docker build ./backend --file ./backend/Dockerfile --tag backend-image:$(date +%s)

      - name: Build Frontend Image
        run: |
          docker build ./frontend --file ./frontend/Dockerfile --tag frontend-image:$(date +%s)

      - name: Verify current directory
        run: |
          pwd
          ls -la

      - name: Run Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Check if Backend Container is Running
        run: |
          docker ps -a

      - name: Check docker logs
        run: |
          docker-compose logs backend

      - name: Check Backend Logs
        run: docker logs my-backend-container

      - name: Install curl in Backend Container
        run: |
          docker exec my-backend-container apt-get update
          docker exec my-backend-container apt-get install -y

      - name: Wait for MongoDB to Start
        run: sleep 10

      - name: Run Backend Unit Tests
        run: |
          docker exec my-backend-container mvn test

      - name: Shut Down Docker Compose
        run: |
          docker-compose -f docker-compose.yml down

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Perform ShiftLeft Scan
        uses: ShiftLeftSecurity/scan-action@master
        with:
          type: "credscan,java,depscan"
        env:
          SCAN_OUTPUT: reports
          SCAN_CREATE_BASELINE: true

      - name: View Dependency Scan Report (JSON)
        run: |
          echo "Dependency Scan Findings:"
          cat reports/depscan-report-universal.json

      - name: Print baseline scan report
        run: cat reports/.sastscan.baseline

  push-to-ecr:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }} # Still using the Region
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} #Still using Account ID
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Build and tag backend image
        run: |
          docker build ./backend -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.BACKEND_REPO }}:latest

      - name: Build and tag frontend image
        run: |
          docker build ./frontend -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.FRONTEND_REPO }}:latest

      - name: Push backend image
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.BACKEND_REPO }}:latest

      - name: Push frontend image
        run: |
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ secrets.FRONTEND_REPO }}:latest

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: [push-to-ecr]
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Backend ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ secrets.ECS_BACKEND_TASK_DEFINITION_FILE }}
          service: ${{ secrets.ECS_BACKEND_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          container-name: backend
          image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ secrets.BACKEND_REPO }}:latest

      - name: Update Frontend ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ secrets.ECS_FRONTEND_TASK_DEFINITION_FILE }}
          service: ${{ secrets.ECS_FRONTEND_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          container-name: frontend
          image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${{ secrets.FRONTEND_REPO }}:latest

      - name: Deploy Backend Service to ECS
        uses: aws-actions/amazon-ecs-deploy-service@v1
        with:
          service: ${{ secrets.ECS_BACKEND_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true

      - name: Deploy Frontend Service to ECS
        uses: aws-actions/amazon-ecs-deploy-service@v1
        with:
          service: ${{ secrets.ECS_FRONTEND_SERVICE_NAME }}
          cluster: ${{ secrets.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
